"const cheerio = require('cheerio');\nconst config = require('../../config');\nconst axios = require('../../utils/axios');\nconst iconv = require('iconv-lite');\nconst url = require('url');\n\nconst base = 'http://www.t66y.com';\nconst section = 'thread0806.php?fid=';\nconst axios_ins = axios.create({\n headers: {\n 'User-Agent': config.ua,\n Referer: base,\n },\n responseType: 'arraybuffer',\n});\n\nfunction killViidii(orginUrl) {\n var decodeStr = /.*\\?http/g;\n var decodeSig = /______/g;\n var jsSuffix = '&amp;amp;z';\n var htmlSuffix = '&amp;z';\n var returnSuffix = 'return false';\n if (orginUrl.indexOf('viidii') != -1) {\n var pureUrl = orginUrl.replace(decodeStr, 'http').replace(decodeSig, '.').replace(jsSuffix, '').replace(htmlSuffix, '').replace(returnSuffix, '');\n return pureUrl\n } else {\n return orginUrl;\n }\n}\n\nconst sourceTimezoneOffset = -8;\nconst filterReg = /read\\.php/;\nmodule.exports = async (ctx) =&gt; {\n const res = await axios_ins.get(url.resolve(base, `${section}${ctx.params.id}`));\n const data = iconv.decode(res.data, 'gbk');\n const $ = cheerio.load(data);\n let list = $('#ajaxtable &gt; tbody:nth-child(2)');\n list = $('.tr2', list)\n .not('.tr2.tac')\n .nextAll();\n\n const reqList = [];\n const out = [];\n const indexList = []; // New item index\n let skip = 0;\n\n for (let i = 0; i &lt; Math.min(list.length, 20); i++) {\n const $ = cheerio.load(list[i]);\n let title = $('.tal h3 a');\n const path = title.attr('href');\n\n // Filter duplicated entries\n if (path.match(filterReg) !== null) {\n skip++;\n continue;\n }\n const link = url.resolve(base, path);\n\n // Check cache\n const cache = await ctx.cache.get(link);\n if (cache) {\n out.push(JSON.parse(cache));\n continue;\n }\n\n if (\n cheerio\n .load(title)('font')\n .text() !== ''\n ) {\n title = cheerio\n .load(title)('font')\n .text();\n } else {\n title = title.text();\n }\n\n const single = {\n title: title,\n link: link,\n guid: path,\n };\n const promise = axios_ins.get(url.resolve(base, path));\n reqList.push(promise);\n indexList.push(i - skip);\n out.push(single);\n }\n let resList;\n try {\n resList = await axios.all(reqList);\n } catch (error) {\n ctx.state.data = `Error occurred: ${error}`;\n return;\n }\n for (let i = 0; i &lt; resList.length; i++) {\n let item = resList[i];\n item = iconv.decode(item.data, 'gbk');\n let $ = cheerio.load(item);\n let time = $('#main &gt; div:nth-child(4) &gt; table &gt; tbody &gt; tr:nth-child(2) &gt; th &gt; div').text();\n const regex = /\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}/;\n const regRes = regex.exec(time);\n time = regRes === null ? new Date() : new Date(regRes[0]);\n time.setTime(time.getTime() + (sourceTimezoneOffset - time.getTimezoneOffset() / 60) * 60 * 60 * 1000);\n\n const content = $('#main &gt; div:nth-child(4) &gt; table &gt; tbody &gt; tr.tr1.do_not_catch &gt; th:nth-child(2) &gt; table &gt; tbody &gt; tr &gt; td &gt; div.tpc_content.do_not_catch').html();\n\n // Change the image tag to display image in rss reader\n try {\n $ = cheerio.load(content);\n } catch (error) {\n console.log(error);\n continue;\n }\n\n // Handle video\n const video = $('a:nth-of-type(2)');\n if (video) {\n const videoScript = video.attr('onclick');\n const regVideo = /https?:\\/\\/.*'/;\n const videoRes = regVideo.exec(videoScript);\n if (videoRes &amp;&amp; videoRes.length !== 0) {\n let link = videoRes[0];\n link = link.slice(0, link.length - 1);\n $('iframe').attr('src', link);\n }\n }\n\n // Handle img tag\n let images = $('img');\n for (let k = 0; k &lt; images.length; k++) {\n $(images[k]).replaceWith(`&lt;img src=\"${$(images[k]).attr('data-src')}\"&gt;`);\n }\n // Handle input tag\n images = $('input');\n for (let k = 0; k &lt; images.length; k++) {\n $(images[k]).replaceWith(`&lt;img src=\"${$(images[k]).attr('data-src')}\"&gt;`);\n }\n\n // Handle links\n const links = $('a[href*=\\'viidii\\']');\n for (let k = 0; k &lt; links.length; k++) {\n $(links[k]).attr('href', killViidii($(links[k]).attr('href')));\n }\n\n out[indexList[i]].description = $.html();\n out[indexList[i]].pubDate = time.toUTCString();\n ctx.cache.set(out[indexList[i]].link, JSON.stringify(out[indexList[i]]), 3 * 60 * 60);\n }\n\n ctx.state.data = {\n title: $('title').text(),\n link: url.resolve(base, `${section}${ctx.params.id}`),\n item: out,\n };\n};"